 
## 1 MT（TCC）事务

手动事务，即TCC。需要用户自行编写Try，Confirm，Cancel接口的实现，并保证三个方法的`幂等性`。

### 1.1 准备工作

- 需要在`分布式事务控制台`中创建一个`事务分组`。
- 需要获取账号的`SecretID`和`SecretKey`。（该账号能够在控制台中查询到事务分组即可）
- 需要能够连接到Maven。

---

### 1.2 引入DTS SDK

通过以下方式引入Spring Free版本的DTS SDK。

``` xml
&lt;dependency&gt;
    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;dts-core&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-RELEASE&lt;/version&gt;
&lt;/dependency&gt;
```

> 注：version填写Release Note中最新版本的即可。

---

### 1.3 客户端配置

在客户端中，使用以下方式添加基本配置。

``` java
private static void initEnv() {
    DtsEnv.setServer("客户端服务标识");
    DtsEnv.setSecretId("SecretID");
    DtsEnv.setSecretKey("SecretKey");
    DtsEnv.addTxmBroker("事务分组ID", "独占集群列表");
}
```

| 配置项              | 数据类型 | 必填 | 默认值                                   | 描述                                                         |
| ------------------- | -------- | ---- | ---------------------------------------- | ------------------------------------------------------------ |
| DtsEnv.addTxmBroker | String   | 是   | 共享集群TC列表，如果是独占集群则需要填写 | 用户的事务分组ID，单客户端使用多个事务分组时可以配置多项     |
| DtsEnv.setSecretId  | String   | 是   | 无                                       | 用户的腾讯云SecretID                                         |
| DtsEnv.setSecretKey | String   | 是   | 无                                       | 用户的腾讯云SecretKey                                        |
| DtsEnv.setServer    | String   | 是   | ${spring.application.name}               | 客户端服务标识，一个事务分组下，同一服务需要使用相同的标识。 |

> 注：通常情况下，仅需要在dts.env.groups下配置一个事务分组。

---

### 1.4 注册TCC

使用以下接口，手动注册TCC接口。

``` java
private static void registerTcc() {
    ITransferService transferService = new TransferService();
    // debit的confirm和cancel
    MTHandlerRegistry.register("name1", TCC.getInstance(transferService, "confirmDebit", transferService, "cancelDebit"));
    // credit的confirm和cancel
    MTHandlerRegistry.register("name2", TCC.getInstance(transferService, "confirmCredit", transferService, "cancelCredit"));
}
```

注册方式比较多，可以参考MTHandlerRegistry.register()和TCC.getInstance()的javadoc。

---

### 1.5 启动分布式事务服务

通过以下方式启动分布式事务服务

``` java
public static void main(String[] args) {
    // 设置参数
    initEnv();
    // 注册TCC
    registerTcc();
    // 启动分布式事务客户端
    DtsClient.start();
}
```

### 1.6 开启主事务

通过以下接口开启主事务。

主事务注解方法正常返回时提交主事务，在抛出异常时进行回滚。

``` java
Long txId = DtsTransaction.begin(Integer timeout);
// 或
Long txId = DtsTransaction.begin(String groupId, Integer timeout);
```

| 参数    | 数据类型 | 必填 | 默认值                                               | 描述                                    |
| ------- | -------- | ---- | ---------------------------------------------------- | --------------------------------------- |
| timeout | Integer  | 否   | 60 * 1000                                            | 事务超时时间（所有Try阶段），单位：毫秒 |
| groupId | String   | 否   | DtsEnv.addTxmBroker 仅配置了一个事务分组时，使用该值 | 主事务的事务分组ID                      |

---

### 1.7 开启分支事务

通过以下接口开启分支事务。

``` java
Long branchId1 = DtsMTBranch.begin("name", new Object[] {null, null, this.to, this.amount});
```

分支事务注解支持的参数包括

| 参数     | 数据类型            | 必填 | 默认值 | 描述                           |
| -------- | ------------------- | ---- | ------ | ------------------------------ |
| name     | String              | 否   | 无     | 分支事务名称，请在同一事务分组 |
| 参数列表 | Array&amp;lt;String&amp;gt; | 否   | 无     | 参数列表，前两个参数固定为null |

---

### 1.8 Confirm和Cancel操作

一个分支事务中，需要包含Try，Confirm，Cancel三个部分。可以使用1.6中的默认值简化配置。

- 分支事务的Try，Confirm，Cancel方法的参数`保持一致`。
- 分支事务的Try，Confirm，Cancel方法的前两个参数固定为`Long txId`和`Long branchId`。

- Try方法：
  - 本地调用Try方法时`txId`和`branchId`参数传`null`，其他参数正常传递。
  - 返回值为`业务逻辑`需要的返回值。
- Confirm方法：
  - 返回值固定为`boolean`类型。
  - 仅在返回`ture`时视为分支事务`Confirm成功`。
  - 返回`false`或`抛出异常`时，视为分支事务`Confirm失败`。
- Cancel方法：
  - 返回值固定为`boolean`类型。
  - 仅在返回`ture`时视为分支事务`Cancel成功`。
  - 返回`false`或`抛出异常`时，视为分支事务`Cancel失败`。

``` java
public interface IOrderService {
    public boolean order(Long txId, Long branchId, Order order);

    public boolean confirmOrder(Long txId, Long branchId, Order order);

    public boolean cancelOrder(Long txId, Long branchId, Order order);
}
```

---

### 1.9 远程请求

#### 1.9.1 自行处理

`上游处理：`

需要从上下文中提取`txId`,`groupId`,`lastBranchId`三个内容传递到下游。

``` properties
txId: DtsContextHolder.get().getTxId();
groupId: DtsContextHolder.get().getGroupId();
lastBranchId: DtsContextHolder.get().getBranchIdStack().peek();
```

> 建议放到下列Header的key中，下游可以通过DTS SDK自行注入。

``` properties
ClientConstant.HTTP_HEADER.TX_ID: txId
ClientConstant.HTTP_HEADER.GROUP_ID: groupId
ClientConstant.HTTP_HEADER.LAST_BRANCH_ID: lastBranchId
```

`下游处理：`

下游可以使用以下方法将从上游传递的三个变量绑定到本地，重新开启全局事务。

``` java
DtsContextHolder.bind(txId, lastBranchId, groupId);
```
